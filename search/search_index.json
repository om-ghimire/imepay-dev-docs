{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Imepay Developer Documentation","text":""},{"location":"#last-updated","title":"Last Updated","text":"<p>September 20, 2021</p>"},{"location":"#introduction","title":"Introduction","text":"<p>IME Digital Solution Ltd. is a subsidiary of IME Group established under the payment and settlement by laws 2072, with an aim to provide digital financial services to customers in partnerships with banks/FIs as well as telecom operators and aggregators, deployed through self- service as well as agent-based delivery channel.</p> <p>IME Digital intends to introduce mobile money service, with name IME pay, under its digital financial services initiative and offer a wide range of payment services to remittance customers existent with money transfer associate company IME Ltd. and also cater to the vast majority of unbanked and under-banked customers of Nepal. IME pay can be accessed via mobile and can be serviced through any of the 20000 plus strong agent network of IME and beyond.</p>"},{"location":"#client-integration","title":"Client Integration","text":"<p>This document describes the process for successfully integrating IME pay into your transaction process, explaining how to facilitate communication between your mobile app and the IME pay.</p> <p>Payment via IME Pay SDK completes in merely 3 steps:</p> <ol> <li>Customer selects IME Pay as the payment method in merchant\u2019s app.</li> <li>Customer Enters wallet number and PIN.</li> <li>Customer completes the transaction.</li> </ol> <p>Note: this document helps to integrate IME Pay SDK to your native mobile app (iOS &amp; Android)</p> <p>Prerequisites</p> <p>Merchants should create below api URL in order to integrate their mobile app with IME Pay</p> <ol> <li>Recording Service: Merchants accepting payments directly from mobile app are special merchant and thus, must create a transaction recording api and provide the URL as parameter while calling the method performpayment in step 2. The API request response format is given in Step 4.</li> <li>Delivery Service: Merchant needs to create a delivery service webhook api, which accepts 5 parameters that will inform the merchant system whether the payment is successful in IME pay or not. And the details should be updated on the table. The API request response format is given in Step 5</li> </ol>"},{"location":"andriod/","title":"Andriod Sdk","text":"<p>Receive payment from your customer through IME pay.</p>"},{"location":"andriod/#overview","title":"Overview","text":"<ol> <li>Introduction</li> <li>SDK Feature</li> <li>SDK Initialization</li> <li>Authenticate Merchant</li> <li>Get Transaction Token</li> <li>Perform Payment</li> <li>Validate Payment</li> <li>Response Codes</li> <li>Sample Code</li> <li>Releases</li> </ol>"},{"location":"andriod/#introduction","title":"Introduction","text":"<p>The IME Pay Payment SDK for Android gives access to merchants to receive payment from IME Pay customers through their native android application.</p>"},{"location":"andriod/#sdk-features","title":"SDK Features","text":"<p>IME pay Android Merchant Payment SDK enables merchants to receive payments from IME pay customes through their native application. The application performs the payment and verifies the transaction status.</p>"},{"location":"andriod/#sdk-initialization","title":"SDK Initialization","text":"<ol> <li>In your project, open your_app &gt; Gradle Scripts &gt; build.gradle (Module: app) and add the following implementation statement  to the dependencies{} section to depend on the latest version of the IMEPay Merchant SDK:    <pre><code>implementation 'com.swifttechnology.imepaysdk:payment-service:4.0.1'\n</code></pre></li> <li>In your activity create an instance for IMEPayment.   <pre><code>  IMEPayment imePayment = new IMEPayment(activity.this, ENVIRONMENT.LIVE);\n</code></pre></li> </ol> <p>!&gt; Note : Use <code>ENVIRONMENT.TEST</code> for test purposes.</p>"},{"location":"andriod/#authenticate-merchant-get-transaction-token","title":"Authenticate Merchant / Get Transaction Token","text":"<p>The merchant is verified using the merchant code, merchant username, merchant password, module which will be provided by the IME pay Developer Support to applicable merchants. </p>"},{"location":"andriod/#perform-payment","title":"Perform Payment","text":"<p>This SDK enables merchants to receive payments through IME pay, using the instance of IMEPayment call the method performpaymentV1().</p> <pre><code>IMEPayment imePayment = new IMEPayment(activity.this, ENVIRONMENT.LIVE);\nimePayment.performPaymentV1(\n       merchantCode.getText().toString(),\n       merchantName.getText().toString(),\n       merchantUrl.getText().toString(), deliveryUrl.getText().toString(),\n       amount.getText().toString(),\n       refId.getText().toString(),\n       module.getText().toString(),\n       user.getText().toString(),\n       password.getText().toString(),\n       new IMEPaymentCallback() {\n@Override\npublic void onSuccess(int responseCode, String transactionId, String msisdn,\nString amount, String refId) {\n// Response Code 100 : Transaction successful.\n// Response Code 101 : Transaction failed.\n// transactionId : Unique ID generated from IME pay system\n// amount: Amount paid by customer\n// refId : Reference Value\n}\n//Override\n//public void onTransactionCancelled(String refID){\n// Your code to handle , if transaction cancelled by user //}\n});\n</code></pre>"},{"location":"andriod/#validate-payment","title":"Validate Payment","text":"<p>After performing payment the SDK will verify the payment. This feature is handled by the SDK itself. On the basis of the validate payment response the developer will get a response in IMEPaymentCallback(). There are two types of responses that a developer can get in IMEPaymentCallback </p> <ul> <li> <p>Response Code 100 :    Transaction was successfully executed and verified.</p> </li> <li> <p>Response Code 101 :    Transaction request was successfully sent, but could not get verified. The customer executing the payment will get an SMS for the confirmation.</p> </li> </ul>"},{"location":"andriod/#important-note-merchant-transaction-recording-url","title":"IMPORTANT NOTE : Merchant Transaction Recording URL","text":"<p>Merchants accepting payments directly from mobile application should be a special merchant and thus, must create a transaction recording api and use the URL as a parameter while calling the method perform payment. Please get the request and response parameter details from IMEPAY Merchant Team.</p>"},{"location":"andriod/#response-codes","title":"Response Codes","text":"<p>These response codes mentioned below are handled by the SDK itself.</p> <ul> <li>403 : Application unauthorized to use the service.</li> <li>500 : Your request cannot be processed at the moment</li> <li>401 : Application request cannot be processed at the moment</li> </ul>"},{"location":"andriod/#sample-code","title":"Sample Code","text":"<p> Click here for Sample Code </p>"},{"location":"andriod/#assets","title":"Assets","text":"<p> Click here for IMEPAY Logo</p>"},{"location":"andriod/#releases","title":"Releases","text":"<ol> <li>v1.1</li> <li>v1.2</li> <li>v1.3</li> <li>Fixed issue related to payment in live portal</li> <li>v2.0</li> <li>v2.1</li> <li>Fixed issue with text color inside PIN edit text</li> <li>v3.0.1</li> <li>New Flow implemented with 2 factor user validation</li> <li>Customer mobile number is prompted in the SDK itself</li> </ol>"},{"location":"header/","title":"IME Pay\u2019s help center","text":"<p>\u2190 Back to imepay.com.np   |   Search these pages with the button in the top right</p>"},{"location":"header/#popular-topics","title":"Popular Topics","text":"<p>Sending Payment</p> <p>Connect Zoom to Cron</p> <p>Use Google Meet in Cron</p> <p>Custom conferencing</p> <p>Multiple Google accounts</p> <p>Security and Trust</p>"},{"location":"header/#faqs","title":"FAQs","text":"<ul> <li> <p>When is Cron available for my platform?</p> <p>While the initial focus is on macOS and Google Calendar accounts, all other platforms are in the works or planned. Request your platform under Requests on this page for us to prioritize it higher and be in touch with you when early access for it is available.</p> </li> <li> <p>Where do I download Cron?</p> <p>You need an invite from a Cron user to create a Cron account. Once you have a Cron account, you can download Cron at download.cron.com and log in.</p> </li> <li> <p>What's Cron's pricing?</p> <p>For early access, the only way you pay is in feedback \u2014\u00a0we hope this sounds fair. Afterwards, we'll always have plans that work for anyone.</p> </li> <li> <p>What's Cron's enterprise tier?</p> <p>Many of the biggest organizations in our industry already use Cron. Please contact enterprise@cron.com with your specific request. See Security and Trust  to find answers questions around security, SSO/SAML, and GDPR.</p> </li> <li> <p>How does Cron protect my privacy?</p> <p>See Security and Trust  on this topic or contact security@cron.com.</p> </li> <li> <p>Where can I report a security issue?</p> <p>Please contact bugs@cron.com and see Security and Trust  to find out about our practices for handling and reacting to security incidents.</p> </li> </ul> <p>Something we didn't cover? We're excited to help@imepay.com.np</p>"},{"location":"header/#product-requests","title":"Product Requests","text":"<p>\u2192 Request Microsoft Outlook early access</p> <p>\u2192 Request Apple iCloud early access</p> <p>\u2192 Request web version early access</p> <p>\u2192 Request Windows early access</p> <p>\u2192 Request Linux early access</p> <p>\u2192 Request mobile iOS/Android early access</p> <p>\u2192 Request a conferencing integration</p> <p>\u2192 Request a feature, report a bug, or share feedback</p>"},{"location":"ios-sdk/","title":"iOS Sdk","text":""},{"location":"ios-sdk/#ime-pay-merchant-payment-sdk-for-ios","title":"IME PAY MERCHANT PAYMENT SDK FOR iOS","text":"<p>Receive payment from your customer through IME Pay Wallet.</p>"},{"location":"ios-sdk/#overview","title":"Overview","text":"<ul> <li>Introduction</li> <li>SDK Feature</li> <li>SDK Initialization</li> <li>Authenticate Merchant</li> <li>Get Transaction Token</li> <li>Perform Payment</li> <li>Validate Payment</li> <li>Response Codes</li> </ul> <p>The IME Pay Payment SDK for iOS gives access to merchants to receive payment from IME Pay customers through their native iOS application.</p>"},{"location":"ios-sdk/#sdk-features","title":"SDK Features","text":"<p>IME Pay iOS Merchant Payment SDK enables merchants to receive payments from IME pay customes through their native application. The SDK performs the payment and returns transaction details after transaction succeeds or fails or cancelled with proper error message.</p>"},{"location":"ios-sdk/#sdk-installation","title":"SDK Installation","text":"<p>Cocoapods, iOS 8+</p> <p><code>use frameworks!</code></p> <p><code>pod 'IMEPay'</code> </p> <p>uncomment use frameworks in your pod file in case of swift projects.</p>"},{"location":"ios-sdk/#authenticate-merchant-get-transaction-token","title":"Authenticate Merchant / Get Transaction Token","text":"<p>The merchant is verified using the merchant code, merchant username, merchant password, module which will be provided by the IME Pay Support to applicable merchants.</p>"},{"location":"ios-sdk/#perform-payment","title":"Perform Payment:","text":""},{"location":"ios-sdk/#objective-c","title":"Objective C:","text":"<pre><code>IMPPaymentManager *manager = [[IMPPaymentManager alloc]initWithEnvironment:Live]; // For Production\n\nIMPPaymentManager *manager = [[IMPPaymentManager alloc]initWithEnvironment:Test]; // For Test\n\n [manager payWithUsername:@\"username\" password:@\"password\" merchantCode:@\"merchantCode\" merchantName:@\"merchantName\" merchantUrl:@\"merchantUrl\" amount:@\"amount\" referenceId:@\"referenceId\" module:@\"module\" success:^(IMPTransactionInfo *transactionInfo) {\n\n      // You can extract the following info from transactionInfo\n\n      transactionInfo.responseCode; \n\n      // Response Code 100:- Transaction successful.\n      // Response Code 101:- Transaction failed.\n\n      transactionInfo.responseDescription; // ResponseDescription, message sent from server\n      transactionInfo.transactionId; // Transaction Id, Unique ID generated from IME Pay system.\n      transctionInfo.customerMsisdn; // Customer mobile number (IME Pay wallet ID)\n      transctionInfo.amount; // Payment Amount\n      transactionInfo.referenceId; // Reference Value\n\n  } failure:^(IMPTransactionInfo *transactionInfo, errorMessage) {\n       // Transaction Failure\n  }];\n</code></pre>"},{"location":"ios-sdk/#swift","title":"Swift:","text":"<pre><code>let manager = IMPPaymentManager(environment: Live) // For production\n\nlet manager = IMPPaymentManager(environment: Test) // For Test\n\nmanager?.pay(\n    withUsername: \"username\",\n    password: \"password\",\n    merchantCode: \"merchantCode\",\n    merchantName: \"merchantName\",\n    merchantUrl: \"merchantUrl\",\n    amount: \"amount\",\n    referenceId: \"referenceId\",\n    module: \"module\",\n    success: { (transactionInfo) in\n\n        // You can extract the following info from transactionInfo\n        transactionInfo.responseCode \n\n        // Response Code 100:- Transaction successful.\n        // Response Code 101:- Transaction failed.\n\n        transactionInfo.responseDescription // ResponseDescription, message sent from server\n        transactionInfo.transactionId       // Transaction Id, Unique ID generated from IME Pay system\n        transctionInfo.customerMsisdn       // Customer mobile number (IME Pay wallet ID)\n        transctionInfo.amount                // Payment Amount\n        transactionInfo.referenceId          // Reference Value\n\n    },\n    failure: { (transactionInfo, errorMessage) in\n        // Transaction Failure\n    }\n)\n</code></pre> <p>Note</p> <p>You can use transaction info passed in success and failure blocks, you shouldnt present any alert when success or failure block is called.</p>"},{"location":"ios-sdk/#response-codes","title":"Response Codes","text":"<p>These response codes mentioned below are handled by the SDK itself.</p> <p>403 : Application unauthorized to use the service.</p> <p>500 : Your request cannot be processed at the moment</p> <p>401 : Application request cannot be processed at the moment</p>"},{"location":"plugin/","title":"Plugins","text":""},{"location":"plugin/#woo-commerce-wordpress","title":"Woo Commerce WordPress","text":""},{"location":"plugin/#ime-pay-checkout-process-overview","title":"IME pay Checkout Process Overview:","text":"<p>This document describes the process for successfully integrating IME pay into your transaction process, explaining how to facilitate communication between your Woo commerce built website and the IME pay, and how to setup the plugin.</p> <p>IME Pay checkout process will be completed in 4 to 5 steps.</p>"},{"location":"plugin/#steps-in-ime-pay-checkout","title":"Steps in IME pay Checkout:","text":"<p>STEP 1</p> <p>The first step involves process of installing up IME pay Woo Commerce Plugin. Merchant needs to setup the plugin to their WordPress website. The process involved are:</p> <ol> <li>Download the ZIP file provided by IMEPAY</li> <li>Go to the plugin section in your WordPress admin dashboard</li> <li>Click on Add New and upload the zip file of IMEPAY Woo Commerce plugin and     upload it.</li> <li>After Upload click on install now and activate the plugin.</li> </ol> <p>STEP 2</p> <p>The Second step involves process of Setting up IME pay Woo Commerce Plugin. Merchant needs to setup the plugin to their WordPress website. The process involved are</p> <ol> <li>After installation is complete, go to Woo Commerce &gt; Settings.</li> <li>Go to Payments option where you can find IMEPAY among other payment gateways</li> <li>Click on IMEPAY option and enter your test or live credentials accordingly provided     by IMEPAY (Shown below).</li> </ol> <p>Parameters:</p> <ol> <li>Enable / Disable: To make the plugin working you need to make sure \u201cEnable     imepay payment\u201d is ticked.</li> <li>Title: Display name refers to the name that your users see at the time of payment.     (Name could be your choice. E.g. IMEPAY or IMEPAY gateway).</li> <li>Description: In the description field you can add any text you want that describes     the payment gateway perfectly.</li> <li>IME Username: API username is your merchant username provided by IMEPAY     itself during registration.</li> <li>Password Code: User Password is the password of your merchant username.</li> <li>Merchant Code: Merchant code is the unique code provided to you to represent     your business by IMEPAY during registration</li> <li>Module Name: Module Name is provided by IMEPAY at the time of registration.</li> <li>Invoice Prefix: You can add any prefix text or number that you want to give to the     invoice number. (You can also leave the field blank).</li> <li>Sand Box Mode: Sand Box mode enables you to test the API without spending any     money for checking the API. If you enable the test mode, you should fill all above     credentials (API Username, Merchant Code, User Password Key and Module     Name) according to the test credentials provided by IMEPAY.</li> </ol> <p>NOTE: Currency for processing: You need to select NPR if you have setup multiple currency in your Woo commerce website</p> <p>After all above setup you can create a demo product and begin testing. The expected output is shown below of process involved in buying a product and choosing IME pay as payment gateway.</p> <p>STEP 3</p> <p>Merchant\u2019s page is redirected to IME pay Web Checkout page. It initially validates the TokenId against the MerchantCode, RefId, and Amount sent. In case of failure, error page is displayed. If successful, customer wallet account input form is displayed. Customer verifies transaction amount, and Merchant Name, if satisfied, enters wallet id and PIN (Personal Identification Number) associated with IME pay and clicks \u201cProceed Pay\u201d button.</p> <p>Note: If customer is not satisfied with the payment details, he/she can abort the operation by closing the window or by clicking the Cancel Pay button. If Cancel pay button is pressed, customer will be redirected to the invoice page of the order.</p> <p>STEP 4</p> <p>If combination of entered mobile number and PIN is correct, customer will receive SMS in his/her mobile containing OTP (One Time Password). Customer then must enter the OTP and press Confirm Pay button to process the transaction.</p> <p>Note: If customer decides to cancel the transaction in this stage, he/she can abort the operation by closing the window or by clicking the Cancel Pay button. If Cancel pay button is pressed, customer will be redirected to the invoice page of the order.</p>"},{"location":"plugin/#download-woo-commerce","title":"Download woo commerce:","text":"<p>click here</p>"},{"location":"plugin/#ime-pay-whmcs-plugin","title":"IME pay WHMCS Plugin","text":""},{"location":"plugin/#ime-pay-checkout-process-overview_1","title":"IME pay Checkout Process Overview:","text":"<p>This document describes the process for successfully integrating IME pay into your transaction process, explaining how to facilitate communication between your Woo commerce built website and the IME pay, and how to setup the plugin.</p> <pre><code>IME Pay checkout process will be completed in 4 to 5 steps.\n</code></pre>"},{"location":"plugin/#steps-in-ime-pay-checkout_1","title":"Steps in IME pay Checkout:","text":"<p>STEP 1</p> <p>The first step involves process of installing up IME pay WHMCS Plugin. Merchant needs to setup the plugin to their WHMCS website. The process involved are: 1) Download the ZIP file provided by IMEPAY 2) Simply extract at the root folder of your WHMCS installation. Following files should be copied in following directories.</p> <p><pre><code>File Structure\n</code></pre> <pre><code>modules /\n| gateways /\n| imegateway.php^1\n| callback /\n| imegateway.php 2\n| imegateway /\n| imelogo.png^3\n</code></pre> <pre><code>1. Inside your WHMCS installation folder you find the modules folder and following by,\nyou get gateways folder.\n2. You need to add imegateway.php^1 file from the extracted zip to that very same folder.\n3. Secondly create an imegateway folder inside it and add imelogo.png^3 file.\n4. Navigate to the callback folder inside gateways folder and upload the callback file named\nimegateway.php^2 from the callback folder of provided zip.\n</code></pre> <pre><code>[Numbers represents file from above file structure]\n</code></pre></p> <p>Note: For the Imepay payment gateway module to work, your website hosting server need to have enable the 7979 TCP port and have whitelisted 202.1 6 6.194. 90 Further again if the plugin is not working you need to contact IME Pay support team and ask them to whitelist your website IP address.</p> <p>STEP 2</p> <p><pre><code>Login to admin area of your WHMCS installation and enable the gateway from Setup -\n&gt; Payments - &gt; Payment Gateways (Refer to the image below)\n</code></pre> 1. Go to Payments option where you can find IMEPAY among other payment gateways 2. Click on IMEPAY option and enter your test or live credentials accordingly provided     by IMEPAY (Shown below).</p> <ol> <li>Once the gateway is enabled, the gateway parameters need to be configured.     Navigate to manage existing Gateways (Refer to the image below)</li> </ol> <p><pre><code>Parameters:\n</code></pre> 1. Display Name: Display name refers to the name that your users see at the time of     payment. (Name could be your choice. E.g. IMEPAY or IMEPAY gateway) 2. API Username: API username is your merchant username provided by IMEPAY itself     during registration 3. Merchant Code: Merchant code is the unique code provided to you to represent your     business by IMEPAY during registration 4. User Password Key: User Password is the password of your merchant username. 5. Module Name: Module Name is provided by IMEPAY at the time of registration. 6. Test Mode: Test mode enables you to test the API without spending any money for     checking the API. If you enable the test mode, you should fill all above credentials (API     Username, Merchant Code, User Password Key and Module Name) according to the test     credentials provided by IMEPAY. 7. Convert for processing: You need to select NPR if you have setup multiple currency in     your WHMCS panel.</p> <p>(^) Note:</p> <ol> <li>Please make sure that the currency \"NPR\" is selected for the option \"Convert to For     Processing\".</li> <li>If you are using test mode, then the credentials should be filled accordingly.</li> </ol> <pre><code>After all above setup you can create a demo product and begin testing. The expected output is shown\nbelow of process involved in buying a product and choosing IME pay as payment gateway.\n</code></pre> <p>STEP 3</p> <p>Merchant\u2019s page is redirected to IME pay Web Checkout page. It initially validates the TokenId against the MerchantCode, RefId, and Amount sent. In case of failure, error page is displayed. If successful, customer wallet account input form is displayed. Customer verifies transaction amount, and Merchant Name, if satisfied, enters wallet id and PIN (Personal Identification Number) associated with IME pay and clicks \u201cProceed Pay\u201d button.</p> <p>Note: If customer is not satisfied with the payment details, he/she can abort the operation by closing the window or by clicking the Cancel Pay button. If Cancel pay button is pressed by the customers, they will be redirected to the invoice page of the order section immediately.</p> <p>STEP 4</p> <p>If combination of entered mobile number and PIN is correct, customer will receive SMS in his/her mobile containing OTP (One Time Password). Customer then must enter the OTP and press Confirm Pay button to process the transaction.</p> <p>Note: If customer decides to cancel the transaction in this stage, he/she can abort the operation by closing the window or by clicking the Cancel Pay button. If Cancel pay button is pressed, customer will be redirected to the invoice page of the order.</p>"},{"location":"plugin/#download-whmcs-plugin","title":"Download WHMCS Plugin :","text":"<p>click here</p>"},{"location":"plugin/#contacts","title":"Contacts","text":"<p>Rajesh Shrestha - Business Analyst rajesh.shrestha@imeremit.com.np Ph. 9801190734</p>"}]}